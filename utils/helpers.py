import datetime
import json

SERIES_TO_COLUMNS = {
    'series1': 'ia7',
    'series2': 'ia8',
    'series3': 'ia14',
    'series4': 'ia15',
    'dt': 'dt'
}
COLUMNS_TO_SERIES = {v: k for k, v in SERIES_TO_COLUMNS.iteritems()}

SERIES_TO_NAMES = {
    'series1': 'KORYTARZ',
    'series2': 'ZEWNETRZE',
    'series3': 'PODWYZSZENIE',
    'series4': 'WILGOTNOSC',
    'dt': 'dt'
}


def set_correct_series_names(series_data):
    for s in series_data['series']:
        if s['key'] in SERIES_TO_NAMES:
            s['key'] = SERIES_TO_NAMES[s['key']]


def prepare_data(sensor, used_series=('series1','series2','series3', 'series4' )):
    sensor = reduce_data(sensor)
    tickValues = []
    series1 = {"color": "#800000", "values": [], 'key': 'series1'}
    series2 = {"color": "#ff7f0e", "values": [], 'key': 'series2'}
    series3 = {"color": "#000080", "values": [], 'key': 'series3'}
    series4 = {"color": "#000080", "values": [], 'key': 'series4'}
    dt = {"xlabel": []}
    for i, row in enumerate(sensor):
        series1['values'].append({'x': i, 'y': row.ia7})
        series2['values'].append({'x': i, 'y': row.ia8})
        series3['values'].append({'x': i, 'y': row.ia14})
        series4['values'].append({'x': i, 'y': row.ia15})
        dt['xlabel'].append(row.dt.strftime('%d-%m-%Y %H:%M'))

    correct_series_data =[s for s in [series1, series2, series3, series4]
                          if s['key'] in used_series]
    series_data = {'series': correct_series_data}
    series_data.update(dt)
    return series_data


def reduce_data(sensor):
    len_entries = len(sensor)
    max_len_data = 60 / 3 * 24
    # max_len_data = 15

    if len_entries >= max_len_data:
        red_indexes = get_reduce_indexes(len_entries, max_len_data)
        new_entries = [sensor[i] for i in red_indexes]
        sensor = new_entries
    return sensor
def get_columns_name(request_data):
    col_names = []
    for k, v in request_data.iteritems():
        if k.startswith('series') and v == 'on':
            col_names.append(SERIES_TO_COLUMNS[k])
    return col_names


def get_query_with_time_delta(delta=3):
    hour_before = datetime.datetime.now().replace(microsecond=0) - datetime.timedelta(hours=delta)
    return 'select ia7, ia8, ia14, ia15, dt from board  where ia14 is not null and dt > "{}" order by dt ASC'.format(
            hour_before)


def get_series_and_labels(entries):
    d = {}
    data = []
    for i1, i2, i3, i4, dt in entries:
        d['ia7'] = i1
        d['ia8'] = i2
        d['ia14'] = i3
        d['ia15'] = i4
        d['dt'] = dt
        data.append(d)
        d = {}
    ia7 = [x['ia7'] for x in data]
    ia8 = [x['ia8'] for x in data]
    ia14 = [x['ia14'] for x in data]
    ia15 = [x['ia15'] for x in data]
    dt = [x['dt'] for x in data]
    return json.dumps(ia7), json.dumps(ia8), json.dumps(ia14), json.dumps(ia15), json.dumps(dt)


def get_series_and_labels_as_xy_dict(entries):
    s1 = []
    s2 = []
    s3 = []
    s4 = []
    lables = []
    i = 0
    for i1, i2, i3, i4, dt in entries:
        s1.append({'x': i, 'y': i1})
        s2.append({'x': i, 'y': i2})
        s3.append({'x': i, 'y': i3})
        s4.append({'x': i, 'y': i4})
        lables.append(dt)
        i += 1
    averages = (('KORYTARZ', series_average(s1)),
                ('ZEWNETRZE', series_average(s2)),
                ('PODWYZSZENIE', series_average(s3)),
                ('WILGOTNOSC', series_average(s4)),
                )
    lables = get_correct_dt(lables)
    return json.dumps(s1), json.dumps(s2), json.dumps(s3), json.dumps(s4), json.dumps(lables), averages


def series_average(numbers):
    if numbers:
        val_list = [x['y'] for x in numbers if x['y']]
        return round(float(sum(val_list)) / max(len(val_list), 1), 1)
    return 'None'


def get_stats(series):
    cleared_series = clear_series(series)
    s_max = max(cleared_series)
    s_min = min(cleared_series)
    max_min_diff = s_max - s_min
    stop_start_diff = cleared_series[-1] - cleared_series[0]
    stats_dict = dict(
        min=s_min,
        max=s_max,
        max_min_diff=max_min_diff,
        stop_start_diff=stop_start_diff
    )
    return stats_dict


def clear_series(series):
    '''
    :param series:
    :return: series without None values
    '''
    return [x for x in series if x is not None]


def get_correct_dt(dt):
    return [(datetime.datetime.strptime(x, '%Y-%m-%d %H:%M:%S') + datetime.timedelta(hours=1))\
             .strftime("%Y-%m-%d %H:%M:%S")\
            for x in dt]


def interval_type_to_hours(interval_type, interval_val):
    finall_val = int(interval_val)
    if interval_type == 'hours':
        return finall_val
    elif interval_type == 'days':
        return finall_val * 24
    elif interval_type == 'weeks':
        return finall_val * 24 * 7
    elif interval_type == 'all':
        return finall_val * 24 * 12000

def prepare_request(request):
    out0 = request.args.get('out0')
    out1 = request.args.get('out1')
    out2 = request.args.get('out2')
    out3 = request.args.get('out3')
    out4 = request.args.get('out4')
    out5 = request.args.get('out5')
    out6 = request.args.get('out6')
    di0 = request.args.get('di0')
    di1 = request.args.get('di1')
    di2 = request.args.get('di2')
    di3 = request.args.get('di3')
    ia0 = request.args.get('ia0')
    ia1 = request.args.get('ia1')
    ia2 = request.args.get('ia2')
    ia3 = request.args.get('ia3')
    ia4 = request.args.get('ia4')
    ia5 = request.args.get('ia5')
    ia6 = request.args.get('ia6')
    ia7 = request.args.get('ia7')
    ia8 = request.args.get('ia8')
    ia9 = request.args.get('ia9')
    ia10 = request.args.get('ia10')
    ia11 = request.args.get('ia11')
    ia12 = request.args.get('ia12')
    ia13 = request.args.get('ia13')
    ia14 = request.args.get('ia14')
    ia15 = request.args.get('ia15')
    ia166 = request.args.get('ia166')
    ia17 = request.args.get('ia17')
    ia18 = request.args.get('ia18')
    ia19 = request.args.get('ia19')
    freq = request.args.get('freq')
    duty = request.args.get('duty')
    pwm = request.args.get('pwm')
    sec0 = request.args.get('sec0')
    sec1 = request.args.get('sec1')
    sec2 = request.args.get('sec2')
    sec3 = request.args.get('sec3')
    sec4 = request.args.get('sec4')
    request_args = [out0, out1, out2, out3, out4, out5, out6, di0, di1, di2, di3, ia0, ia1, ia2, ia3, ia4, ia5, ia6,
                    ia7, ia8, ia9, ia10, ia11, ia12, ia13, ia14, ia15, ia166, ia17, ia18, ia19, freq, duty, pwm, sec0,
                    sec1, sec2, sec3, sec4]
    normalized_data = [d if d != '-60.0' else None for d in request_args]
    return normalized_data

def get_reduce_indexes(len_data, max_len=480):

    factor = len_data / int(max_len)
    print factor
    red_list = [x for x in range(len_data) if x % factor == 0]
    if red_list[-1] != len_data - 1:
        red_list.append(len_data -1)
    return red_list

def get_corect_datetime_limit(request):
    map_int_type_to_multiplier = {
        'hours': 1,
        'days': 24,
        'weeks': 24 * 7,
        'all':  24 * 12000
    }
    try:
        return int(request['time_delta']) * map_int_type_to_multiplier[request['interval_type']]
    except:
        print request


def get_stats(series_data):
    min_list = []
    max_list = []
    for s in series_data['series']:
        y = [k['y'] for k in s['values']]
        if y:
            min_list.append(min(y))
            max_list.append(max(y))
    min_max_data = {
        'min': min(min_list),
        'max': max(max_list),
    }
    series_data.update(min_max_data)
    stats_data = dict()
    for s in series_data['series']:
        series_values = [y['y'] for y in s['values'] if y['y']]
        stats_data[s['key']] = dict()
        if series_values:
            stats_data[s['key']]['start'] = series_values[0]
            stats_data[s['key']]['stop'] = series_values[-1]
            stats_data[s['key']]['wzrost'] = stats_data[s['key']]['stop'] - stats_data[s['key']]['start']
            stats_data[s['key']]['srednia'] = round(sum(series_values) / float(len(series_values)), 2)
            stats_data[s['key']]['min'] = min(series_values)
            stats_data[s['key']]['max'] = max(series_values)
    return stats_data


if __name__ == '__main__':
    req = {'series2': 'on', 'series1': 'on', 'time_delta': '2', 'interval_type': 'days'}

    print get_corect_datetime_limit(req)
    series_data = {'series': [{'color': '#800000', 'values': [{'y': 20, 'x': 0}, {'y': 20, 'x': 1}, {'y': 20, 'x': 2}, {'y': 20, 'x': 3}, {'y': 20, 'x': 4}, {'y': 20, 'x': 5}, {'y': 20, 'x': 6}, {'y': 20, 'x': 7}, {'y': 20, 'x': 8}, {'y': 20, 'x': 9}, {'y': 20, 'x': 10}, {'y': 20, 'x': 11}, {'y': 20, 'x': 12}, {'y': 20, 'x': 13}, {'y': 20, 'x': 14}, {'y': 19.9, 'x': 15}, {'y': 19.9, 'x': 16}, {'y': 19.9, 'x': 17}, {'y': 19.9, 'x': 18}, {'y': 19.9, 'x': 19}, {'y': 19.9, 'x': 20}, {'y': 19.9, 'x': 21}, {'y': 19.9, 'x': 22}, {'y': 19.9, 'x': 23}, {'y': 19.9, 'x': 24}, {'y': 19.9, 'x': 25}, {'y': 19.9, 'x': 26}, {'y': 19.9, 'x': 27}, {'y': 19.9, 'x': 28}, {'y': 19.9, 'x': 29}, {'y': 19.9, 'x': 30}, {'y': 19.9, 'x': 31}, {'y': 19.9, 'x': 32}, {'y': 19.9, 'x': 33}, {'y': 19.9, 'x': 34}, {'y': 19.9, 'x': 35}, {'y': 19.9, 'x': 36}, {'y': 20, 'x': 37}, {'y': 20, 'x': 38}, {'y': 20, 'x': 39}, {'y': 20, 'x': 40}, {'y': 20, 'x': 41}, {'y': 20, 'x': 42}, {'y': 20, 'x': 43}, {'y': 20, 'x': 44}, {'y': 20.1, 'x': 45}, {'y': 20.1, 'x': 46}, {'y': 20.1, 'x': 47}, {'y': 20.1, 'x': 48}, {'y': 20.1, 'x': 49}, {'y': 20.1, 'x': 50}, {'y': 20.1, 'x': 51}, {'y': 20.1, 'x': 52}, {'y': 20.1, 'x': 53}, {'y': 20.1, 'x': 54}, {'y': 20.1, 'x': 55}, {'y': 20.1, 'x': 56}, {'y': 20.1, 'x': 57}, {'y': 20.2, 'x': 58}, {'y': 20.2, 'x': 59}, {'y': 20.2, 'x': 60}, {'y': 20.2, 'x': 61}, {'y': 20.2, 'x': 62}, {'y': 20.2, 'x': 63}, {'y': 20.2, 'x': 64}, {'y': 20.3, 'x': 65}, {'y': 20.3, 'x': 66}, {'y': 20.3, 'x': 67}, {'y': 20.3, 'x': 68}, {'y': 20.3, 'x': 69}, {'y': 20.3, 'x': 70}, {'y': 20.3, 'x': 71}, {'y': 20.3, 'x': 72}, {'y': 20.3, 'x': 73}, {'y': 20.3, 'x': 74}, {'y': 20.3, 'x': 75}, {'y': 20.3, 'x': 76}, {'y': 20.3, 'x': 77}, {'y': 20.4, 'x': 78}, {'y': 20.4, 'x': 79}, {'y': 20.4, 'x': 80}, {'y': 20.4, 'x': 81}, {'y': 20.4, 'x': 82}, {'y': 20.4, 'x': 83}, {'y': 20.4, 'x': 84}, {'y': 20.5, 'x': 85}, {'y': 20.5, 'x': 86}, {'y': 20.5, 'x': 87}, {'y': 20.5, 'x': 88}, {'y': 20.5, 'x': 89}, {'y': 20.5, 'x': 90}, {'y': 20.5, 'x': 91}, {'y': 20.5, 'x': 92}, {'y': 20.5, 'x': 93}, {'y': 20.5, 'x': 94}, {'y': 20.5, 'x': 95}, {'y': 20.6, 'x': 96}, {'y': 20.5, 'x': 97}, {'y': 20.5, 'x': 98}, {'y': 20.6, 'x': 99}, {'y': 20.6, 'x': 100}, {'y': 20.6, 'x': 101}, {'y': 20.6, 'x': 102}, {'y': 20.6, 'x': 103}, {'y': 20.6, 'x': 104}, {'y': 20.6, 'x': 105}, {'y': 20.6, 'x': 106}, {'y': 20.6, 'x': 107}, {'y': 20.6, 'x': 108}, {'y': 20.6, 'x': 109}, {'y': 20.6, 'x': 110}, {'y': 20.6, 'x': 111}, {'y': 20.6, 'x': 112}, {'y': 20.6, 'x': 113}, {'y': 20.6, 'x': 114}, {'y': 20.6, 'x': 115}, {'y': 20.6, 'x': 116}, {'y': 20.6, 'x': 117}, {'y': 20.6, 'x': 118}, {'y': 20.6, 'x': 119}, {'y': 20.6, 'x': 120}, {'y': 20.6, 'x': 121}, {'y': 20.7, 'x': 122}, {'y': 20.7, 'x': 123}, {'y': 20.7, 'x': 124}, {'y': 20.7, 'x': 125}, {'y': 20.7, 'x': 126}, {'y': 20.7, 'x': 127}, {'y': 20.7, 'x': 128}, {'y': 20.7, 'x': 129}, {'y': 20.7, 'x': 130}, {'y': 20.7, 'x': 131}, {'y': 20.7, 'x': 132}, {'y': 20.7, 'x': 133}, {'y': 20.7, 'x': 134}, {'y': 20.7, 'x': 135}, {'y': 20.7, 'x': 136}, {'y': 20.7, 'x': 137}, {'y': 20.7, 'x': 138}, {'y': 20.7, 'x': 139}, {'y': 20.7, 'x': 140}, {'y': 20.7, 'x': 141}, {'y': 20.7, 'x': 142}, {'y': 20.7, 'x': 143}, {'y': 20.7, 'x': 144}, {'y': 20.7, 'x': 145}, {'y': 20.7, 'x': 146}, {'y': 20.8, 'x': 147}, {'y': 20.8, 'x': 148}, {'y': 20.8, 'x': 149}, {'y': 20.8, 'x': 150}, {'y': 20.8, 'x': 151}, {'y': 20.8, 'x': 152}, {'y': 20.8, 'x': 153}, {'y': 20.8, 'x': 154}, {'y': 20.8, 'x': 155}, {'y': 20.8, 'x': 156}, {'y': 20.8, 'x': 157}, {'y': 20.8, 'x': 158}], 'key': 'series1'}, {'color': '#ff7f0e', 'values': [{'y': 12.1, 'x': 0}, {'y': 12.1, 'x': 1}, {'y': 12.1, 'x': 2}, {'y': 12.1, 'x': 3}, {'y': 12.1, 'x': 4}, {'y': 12.2, 'x': 5}, {'y': 12.2, 'x': 6}, {'y': 12.2, 'x': 7}, {'y': 12.2, 'x': 8}, {'y': 12.3, 'x': 9}, {'y': 12.3, 'x': 10}, {'y': 12.5, 'x': 11}, {'y': 12.6, 'x': 12}, {'y': 12.6, 'x': 13}, {'y': 12.8, 'x': 14}, {'y': 12.8, 'x': 15}, {'y': 12.7, 'x': 16}, {'y': 12.7, 'x': 17}, {'y': 12.7, 'x': 18}, {'y': 12.8, 'x': 19}, {'y': 12.8, 'x': 20}, {'y': 12.9, 'x': 21}, {'y': 12.9, 'x': 22}, {'y': 13, 'x': 23}, {'y': 13, 'x': 24}, {'y': 13.1, 'x': 25}, {'y': 13.1, 'x': 26}, {'y': 13.1, 'x': 27}, {'y': 13.2, 'x': 28}, {'y': 13.3, 'x': 29}, {'y': 13.3, 'x': 30}, {'y': 13.4, 'x': 31}, {'y': 13.5, 'x': 32}, {'y': 13.5, 'x': 33}, {'y': 13.5, 'x': 34}, {'y': 13.6, 'x': 35}, {'y': 13.7, 'x': 36}, {'y': 13.8, 'x': 37}, {'y': 13.8, 'x': 38}, {'y': 13.9, 'x': 39}, {'y': 14, 'x': 40}, {'y': 14, 'x': 41}, {'y': 14.1, 'x': 42}, {'y': 14.1, 'x': 43}, {'y': 14.5, 'x': 44}, {'y': 14.5, 'x': 45}, {'y': 14.6, 'x': 46}, {'y': 14.7, 'x': 47}, {'y': 14.8, 'x': 48}, {'y': 14.9, 'x': 49}, {'y': 15.1, 'x': 50}, {'y': 15.3, 'x': 51}, {'y': 15.3, 'x': 52}, {'y': 15.3, 'x': 53}, {'y': 15.5, 'x': 54}, {'y': 15.5, 'x': 55}, {'y': 15.6, 'x': 56}, {'y': 15.6, 'x': 57}, {'y': 15.8, 'x': 58}, {'y': 15.8, 'x': 59}, {'y': 15.9, 'x': 60}, {'y': 16, 'x': 61}, {'y': 16.1, 'x': 62}, {'y': 16.2, 'x': 63}, {'y': 16.3, 'x': 64}, {'y': 16.3, 'x': 65}, {'y': 16.3, 'x': 66}, {'y': 16.3, 'x': 67}, {'y': 16.4, 'x': 68}, {'y': 16.5, 'x': 69}, {'y': 16.7, 'x': 70}, {'y': 16.7, 'x': 71}, {'y': 16.8, 'x': 72}, {'y': 16.9, 'x': 73}, {'y': 17, 'x': 74}, {'y': 17, 'x': 75}, {'y': 17.1, 'x': 76}, {'y': 17.3, 'x': 77}, {'y': 17, 'x': 78}, {'y': 16.9, 'x': 79}, {'y': 16.9, 'x': 80}, {'y': 17.3, 'x': 81}, {'y': 17.6, 'x': 82}, {'y': 17.9, 'x': 83}, {'y': 17.8, 'x': 84}, {'y': 17.9, 'x': 85}, {'y': 18.1, 'x': 86}, {'y': 18.5, 'x': 87}, {'y': 18.6, 'x': 88}, {'y': 18.3, 'x': 89}, {'y': 18.2, 'x': 90}, {'y': 18.1, 'x': 91}, {'y': 18, 'x': 92}, {'y': 18, 'x': 93}, {'y': 17.8, 'x': 94}, {'y': 17.8, 'x': 95}, {'y': 17.7, 'x': 96}, {'y': 17.8, 'x': 97}, {'y': 18, 'x': 98}, {'y': 18.1, 'x': 99}, {'y': 18.2, 'x': 100}, {'y': 18.3, 'x': 101}, {'y': 18.4, 'x': 102}, {'y': 18.7, 'x': 103}, {'y': 18.5, 'x': 104}, {'y': 18.3, 'x': 105}, {'y': 18.2, 'x': 106}, {'y': 18.2, 'x': 107}, {'y': 18.5, 'x': 108}, {'y': 19.1, 'x': 109}, {'y': 19.3, 'x': 110}, {'y': 19.2, 'x': 111}, {'y': 19, 'x': 112}, {'y': 19, 'x': 113}, {'y': 19.1, 'x': 114}, {'y': 19, 'x': 115}, {'y': 19, 'x': 116}, {'y': 19, 'x': 117}, {'y': 19.2, 'x': 118}, {'y': 19.3, 'x': 119}, {'y': 19.1, 'x': 120}, {'y': 19, 'x': 121}, {'y': 19.3, 'x': 122}, {'y': 19.5, 'x': 123}, {'y': 19.5, 'x': 124}, {'y': 19.5, 'x': 125}, {'y': 19.5, 'x': 126}, {'y': 19.6, 'x': 127}, {'y': 19.7, 'x': 128}, {'y': 19.8, 'x': 129}, {'y': 20, 'x': 130}, {'y': 19.9, 'x': 131}, {'y': 20, 'x': 132}, {'y': 19.9, 'x': 133}, {'y': 20, 'x': 134}, {'y': 20.1, 'x': 135}, {'y': 20.2, 'x': 136}, {'y': 20.2, 'x': 137}, {'y': 20.2, 'x': 138}, {'y': 20.2, 'x': 139}, {'y': 20.3, 'x': 140}, {'y': 20.3, 'x': 141}, {'y': 20.3, 'x': 142}, {'y': 20.5, 'x': 143}, {'y': 20.5, 'x': 144}, {'y': 20.3, 'x': 145}, {'y': 20.2, 'x': 146}, {'y': 20.3, 'x': 147}, {'y': 20.3, 'x': 148}, {'y': 20.5, 'x': 149}, {'y': 20.5, 'x': 150}, {'y': 20.5, 'x': 151}, {'y': 20.6, 'x': 152}, {'y': 20.7, 'x': 153}, {'y': 20.8, 'x': 154}, {'y': 20.8, 'x': 155}, {'y': 20.8, 'x': 156}, {'y': 20.8, 'x': 157}, {'y': 20.9, 'x': 158}], 'key': 'series2'}, {'color': '#000080', 'values': [{'y': 0, 'x': 0}, {'y': 0, 'x': 1}, {'y': 0, 'x': 2}, {'y': 0, 'x': 3}, {'y': 0, 'x': 4}, {'y': 0, 'x': 5}, {'y': 0, 'x': 6}, {'y': 0, 'x': 7}, {'y': 0, 'x': 8}, {'y': 0, 'x': 9}, {'y': 0, 'x': 10}, {'y': 0, 'x': 11}, {'y': 0, 'x': 12}, {'y': 0, 'x': 13}, {'y': 0, 'x': 14}, {'y': 0, 'x': 15}, {'y': 0, 'x': 16}, {'y': 0, 'x': 17}, {'y': 0, 'x': 18}, {'y': 0, 'x': 19}, {'y': 0, 'x': 20}, {'y': 0, 'x': 21}, {'y': 0, 'x': 22}, {'y': 0, 'x': 23}, {'y': 0, 'x': 24}, {'y': 0, 'x': 25}, {'y': 0, 'x': 26}, {'y': 0, 'x': 27}, {'y': 0, 'x': 28}, {'y': 0, 'x': 29}, {'y': 0, 'x': 30}, {'y': 0, 'x': 31}, {'y': 0, 'x': 32}, {'y': 0, 'x': 33}, {'y': 0, 'x': 34}, {'y': 0, 'x': 35}, {'y': 0, 'x': 36}, {'y': 0, 'x': 37}, {'y': 0, 'x': 38}, {'y': 0, 'x': 39}, {'y': 0, 'x': 40}, {'y': 0, 'x': 41}, {'y': 0, 'x': 42}, {'y': 0, 'x': 43}, {'y': 0, 'x': 44}, {'y': 0, 'x': 45}, {'y': 0, 'x': 46}, {'y': 0, 'x': 47}, {'y': 0, 'x': 48}, {'y': 0, 'x': 49}, {'y': 0, 'x': 50}, {'y': 0, 'x': 51}, {'y': 0, 'x': 52}, {'y': 0, 'x': 53}, {'y': 0, 'x': 54}, {'y': 0, 'x': 55}, {'y': 0, 'x': 56}, {'y': 0, 'x': 57}, {'y': 0, 'x': 58}, {'y': 0, 'x': 59}, {'y': 0, 'x': 60}, {'y': 0, 'x': 61}, {'y': 0, 'x': 62}, {'y': 0, 'x': 63}, {'y': 0, 'x': 64}, {'y': 0, 'x': 65}, {'y': 0, 'x': 66}, {'y': 0, 'x': 67}, {'y': 0, 'x': 68}, {'y': 0, 'x': 69}, {'y': 0, 'x': 70}, {'y': 0, 'x': 71}, {'y': 0, 'x': 72}, {'y': 0, 'x': 73}, {'y': 0, 'x': 74}, {'y': 0, 'x': 75}, {'y': 0, 'x': 76}, {'y': 0, 'x': 77}, {'y': 0, 'x': 78}, {'y': 0, 'x': 79}, {'y': 0, 'x': 80}, {'y': 0, 'x': 81}, {'y': 0, 'x': 82}, {'y': 0, 'x': 83}, {'y': 0, 'x': 84}, {'y': 0, 'x': 85}, {'y': 0, 'x': 86}, {'y': 0, 'x': 87}, {'y': 0, 'x': 88}, {'y': 0, 'x': 89}, {'y': 0, 'x': 90}, {'y': 0, 'x': 91}, {'y': 0, 'x': 92}, {'y': 0, 'x': 93}, {'y': 0, 'x': 94}, {'y': 0, 'x': 95}, {'y': 0, 'x': 96}, {'y': 0, 'x': 97}, {'y': 0, 'x': 98}, {'y': 0, 'x': 99}, {'y': 0, 'x': 100}, {'y': 0, 'x': 101}, {'y': 0, 'x': 102}, {'y': 0, 'x': 103}, {'y': 0, 'x': 104}, {'y': 0, 'x': 105}, {'y': 0, 'x': 106}, {'y': 0, 'x': 107}, {'y': 0, 'x': 108}, {'y': 0, 'x': 109}, {'y': 0, 'x': 110}, {'y': 0, 'x': 111}, {'y': 0, 'x': 112}, {'y': 0, 'x': 113}, {'y': 0, 'x': 114}, {'y': 0, 'x': 115}, {'y': 0, 'x': 116}, {'y': 0, 'x': 117}, {'y': 0, 'x': 118}, {'y': 0, 'x': 119}, {'y': 0, 'x': 120}, {'y': 0, 'x': 121}, {'y': 0, 'x': 122}, {'y': 0, 'x': 123}, {'y': 0, 'x': 124}, {'y': 0, 'x': 125}, {'y': 0, 'x': 126}, {'y': 0, 'x': 127}, {'y': 0, 'x': 128}, {'y': 0, 'x': 129}, {'y': 0, 'x': 130}, {'y': 0, 'x': 131}, {'y': 0, 'x': 132}, {'y': 0, 'x': 133}, {'y': 0, 'x': 134}, {'y': 0, 'x': 135}, {'y': 0, 'x': 136}, {'y': 0, 'x': 137}, {'y': 0, 'x': 138}, {'y': 0, 'x': 139}, {'y': 0, 'x': 140}, {'y': 0, 'x': 141}, {'y': 0, 'x': 142}, {'y': 0, 'x': 143}, {'y': 0, 'x': 144}, {'y': 0, 'x': 145}, {'y': 0, 'x': 146}, {'y': 0, 'x': 147}, {'y': 0, 'x': 148}, {'y': 0, 'x': 149}, {'y': 0, 'x': 150}, {'y': 0, 'x': 151}, {'y': 0, 'x': 152}, {'y': 0, 'x': 153}, {'y': 0, 'x': 154}, {'y': 0, 'x': 155}, {'y': 0, 'x': 156}, {'y': 0, 'x': 157}, {'y': 0, 'x': 158}], 'key': 'series3'}, {'color': '#000080', 'values': [{'y': 0, 'x': 0}, {'y': 0, 'x': 1}, {'y': 0, 'x': 2}, {'y': 0, 'x': 3}, {'y': 0, 'x': 4}, {'y': 0, 'x': 5}, {'y': 0, 'x': 6}, {'y': 0, 'x': 7}, {'y': 0, 'x': 8}, {'y': 0, 'x': 9}, {'y': 0, 'x': 10}, {'y': 0, 'x': 11}, {'y': 0, 'x': 12}, {'y': 0, 'x': 13}, {'y': 0, 'x': 14}, {'y': 0, 'x': 15}, {'y': 0, 'x': 16}, {'y': 0, 'x': 17}, {'y': 0, 'x': 18}, {'y': 0, 'x': 19}, {'y': 0, 'x': 20}, {'y': 0, 'x': 21}, {'y': 0, 'x': 22}, {'y': 0, 'x': 23}, {'y': 0, 'x': 24}, {'y': 0, 'x': 25}, {'y': 0, 'x': 26}, {'y': 0, 'x': 27}, {'y': 0, 'x': 28}, {'y': 0, 'x': 29}, {'y': 0, 'x': 30}, {'y': 0, 'x': 31}, {'y': 0, 'x': 32}, {'y': 0, 'x': 33}, {'y': 0, 'x': 34}, {'y': 0, 'x': 35}, {'y': 0, 'x': 36}, {'y': 0, 'x': 37}, {'y': 0, 'x': 38}, {'y': 0, 'x': 39}, {'y': 0, 'x': 40}, {'y': 0, 'x': 41}, {'y': 0, 'x': 42}, {'y': 0, 'x': 43}, {'y': 0, 'x': 44}, {'y': 0, 'x': 45}, {'y': 0, 'x': 46}, {'y': 0, 'x': 47}, {'y': 0, 'x': 48}, {'y': 0, 'x': 49}, {'y': 0, 'x': 50}, {'y': 0, 'x': 51}, {'y': 0, 'x': 52}, {'y': 0, 'x': 53}, {'y': 0, 'x': 54}, {'y': 0, 'x': 55}, {'y': 0, 'x': 56}, {'y': 0, 'x': 57}, {'y': 0, 'x': 58}, {'y': 0, 'x': 59}, {'y': 0, 'x': 60}, {'y': 0, 'x': 61}, {'y': 0, 'x': 62}, {'y': 0, 'x': 63}, {'y': 0, 'x': 64}, {'y': 0, 'x': 65}, {'y': 0, 'x': 66}, {'y': 0, 'x': 67}, {'y': 0, 'x': 68}, {'y': 0, 'x': 69}, {'y': 0, 'x': 70}, {'y': 0, 'x': 71}, {'y': 0, 'x': 72}, {'y': 0, 'x': 73}, {'y': 0, 'x': 74}, {'y': 0, 'x': 75}, {'y': 0, 'x': 76}, {'y': 0, 'x': 77}, {'y': 0, 'x': 78}, {'y': 0, 'x': 79}, {'y': 0, 'x': 80}, {'y': 0, 'x': 81}, {'y': 0, 'x': 82}, {'y': 0, 'x': 83}, {'y': 0, 'x': 84}, {'y': 0, 'x': 85}, {'y': 0, 'x': 86}, {'y': 0, 'x': 87}, {'y': 0, 'x': 88}, {'y': 0, 'x': 89}, {'y': 0, 'x': 90}, {'y': 0, 'x': 91}, {'y': 0, 'x': 92}, {'y': 0, 'x': 93}, {'y': 0, 'x': 94}, {'y': 0, 'x': 95}, {'y': 0, 'x': 96}, {'y': 0, 'x': 97}, {'y': 0, 'x': 98}, {'y': 0, 'x': 99}, {'y': 0, 'x': 100}, {'y': 0, 'x': 101}, {'y': 0, 'x': 102}, {'y': 0, 'x': 103}, {'y': 0, 'x': 104}, {'y': 0, 'x': 105}, {'y': 0, 'x': 106}, {'y': 0, 'x': 107}, {'y': 0, 'x': 108}, {'y': 0, 'x': 109}, {'y': 0, 'x': 110}, {'y': 0, 'x': 111}, {'y': 0, 'x': 112}, {'y': 0, 'x': 113}, {'y': 0, 'x': 114}, {'y': 0, 'x': 115}, {'y': 0, 'x': 116}, {'y': 0, 'x': 117}, {'y': 0, 'x': 118}, {'y': 0, 'x': 119}, {'y': 0, 'x': 120}, {'y': 0, 'x': 121}, {'y': 0, 'x': 122}, {'y': 0, 'x': 123}, {'y': 0, 'x': 124}, {'y': 0, 'x': 125}, {'y': 0, 'x': 126}, {'y': 0, 'x': 127}, {'y': 0, 'x': 128}, {'y': 0, 'x': 129}, {'y': 0, 'x': 130}, {'y': 0, 'x': 131}, {'y': 0, 'x': 132}, {'y': 0, 'x': 133}, {'y': 0, 'x': 134}, {'y': 0, 'x': 135}, {'y': 0, 'x': 136}, {'y': 0, 'x': 137}, {'y': 0, 'x': 138}, {'y': 0, 'x': 139}, {'y': 0, 'x': 140}, {'y': 0, 'x': 141}, {'y': 0, 'x': 142}, {'y': 0, 'x': 143}, {'y': 0, 'x': 144}, {'y': 0, 'x': 145}, {'y': 0, 'x': 146}, {'y': 0, 'x': 147}, {'y': 0, 'x': 148}, {'y': 0, 'x': 149}, {'y': 0, 'x': 150}, {'y': 0, 'x': 151}, {'y': 0, 'x': 152}, {'y': 0, 'x': 153}, {'y': 0, 'x': 154}, {'y': 0, 'x': 155}, {'y': 0, 'x': 156}, {'y': 0, 'x': 157}, {'y': 0, 'x': 158}], 'key': 'series4'}], 'tickValues': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158], 'xlabel': ['2017-05-14 04:02:27', '2017-05-14 04:05:27', '2017-05-14 04:08:27', '2017-05-14 04:11:28', '2017-05-14 04:14:28', '2017-05-14 04:17:28', '2017-05-14 04:20:28', '2017-05-14 04:23:28', '2017-05-14 04:26:29', '2017-05-14 04:29:29', '2017-05-14 04:32:29', '2017-05-14 04:35:29', '2017-05-14 04:38:29', '2017-05-14 04:41:30', '2017-05-14 04:44:30', '2017-05-14 04:47:30', '2017-05-14 04:50:30', '2017-05-14 04:53:30', '2017-05-14 04:56:31', '2017-05-14 04:59:31', '2017-05-14 05:02:31', '2017-05-14 05:05:31', '2017-05-14 05:08:32', '2017-05-14 05:11:32', '2017-05-14 05:14:32', '2017-05-14 05:17:32', '2017-05-14 05:20:33', '2017-05-14 05:23:33', '2017-05-14 05:26:33', '2017-05-14 05:29:33', '2017-05-14 05:32:33', '2017-05-14 05:35:34', '2017-05-14 05:38:34', '2017-05-14 05:41:34', '2017-05-14 05:44:34', '2017-05-14 05:47:34', '2017-05-14 05:50:35', '2017-05-14 05:53:35', '2017-05-14 05:56:35', '2017-05-14 05:59:35', '2017-05-14 06:02:35', '2017-05-14 06:05:36', '2017-05-14 06:08:36', '2017-05-14 06:11:36', '2017-05-14 06:28:22', '2017-05-14 06:31:23', '2017-05-14 06:34:23', '2017-05-14 06:37:23', '2017-05-14 06:40:23', '2017-05-14 06:43:23', '2017-05-14 06:49:29', '2017-05-14 06:52:29', '2017-05-14 06:55:29', '2017-05-14 06:58:29', '2017-05-14 07:01:30', '2017-05-14 07:04:30', '2017-05-14 07:07:30', '2017-05-14 07:10:31', '2017-05-14 07:13:31', '2017-05-14 07:16:31', '2017-05-14 07:19:31', '2017-05-14 07:22:31', '2017-05-14 07:25:31', '2017-05-14 07:28:32', '2017-05-14 07:31:32', '2017-05-14 07:34:32', '2017-05-14 07:37:32', '2017-05-14 07:40:33', '2017-05-14 07:43:33', '2017-05-14 07:46:33', '2017-05-14 07:49:33', '2017-05-14 07:52:34', '2017-05-14 07:55:34', '2017-05-14 07:58:34', '2017-05-14 08:01:34', '2017-05-14 08:04:35', '2017-05-14 08:07:35', '2017-05-14 08:10:35', '2017-05-14 08:13:35', '2017-05-14 08:16:35', '2017-05-14 08:19:36', '2017-05-14 08:22:36', '2017-05-14 08:25:36', '2017-05-14 08:28:36', '2017-05-14 08:31:37', '2017-05-14 08:34:37', '2017-05-14 08:37:37', '2017-05-14 08:40:37', '2017-05-14 08:43:38', '2017-05-14 08:46:38', '2017-05-14 08:49:38', '2017-05-14 08:52:38', '2017-05-14 08:55:38', '2017-05-14 08:58:38', '2017-05-14 09:01:39', '2017-05-14 09:04:39', '2017-05-14 09:07:40', '2017-05-14 09:10:40', '2017-05-14 09:13:40', '2017-05-14 09:16:40', '2017-05-14 09:19:40', '2017-05-14 09:22:40', '2017-05-14 09:25:41', '2017-05-14 09:28:41', '2017-05-14 09:31:41', '2017-05-14 09:34:41', '2017-05-14 09:37:42', '2017-05-14 09:40:42', '2017-05-14 09:43:42', '2017-05-14 09:46:42', '2017-05-14 09:49:43', '2017-05-14 09:52:43', '2017-05-14 09:55:43', '2017-05-14 09:58:43', '2017-05-14 10:01:43', '2017-05-14 10:04:44', '2017-05-14 10:07:44', '2017-05-14 10:10:45', '2017-05-14 10:13:44', '2017-05-14 10:16:44', '2017-05-14 10:19:45', '2017-05-14 10:22:45', '2017-05-14 10:25:45', '2017-05-14 10:28:45', '2017-05-14 10:31:46', '2017-05-14 10:34:46', '2017-05-14 10:37:46', '2017-05-14 10:40:46', '2017-05-14 10:43:47', '2017-05-14 10:46:47', '2017-05-14 10:49:47', '2017-05-14 10:52:47', '2017-05-14 10:55:47', '2017-05-14 10:58:48', '2017-05-14 11:01:48', '2017-05-14 11:04:48', '2017-05-14 11:07:48', '2017-05-14 11:10:49', '2017-05-14 11:13:49', '2017-05-14 11:16:49', '2017-05-14 11:19:49', '2017-05-14 11:22:49', '2017-05-14 11:25:50', '2017-05-14 11:28:50', '2017-05-14 11:31:50', '2017-05-14 11:34:50', '2017-05-14 11:37:51', '2017-05-14 11:40:51', '2017-05-14 11:43:51', '2017-05-14 11:46:51', '2017-05-14 11:49:52', '2017-05-14 11:52:52', '2017-05-14 11:55:52', '2017-05-14 11:58:52', '2017-05-14 12:01:52', '2017-05-14 12:04:53', '2017-05-14 12:07:53', '2017-05-14 12:10:53', '2017-05-14 12:13:53']}
    print get_stats(series_data)